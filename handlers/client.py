from aiogram import types
from data_base import base
from aiogram import Dispatcher
from keyboards import client_kb
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from loader import dp, movie_ganres, movie_ganres_rus
from aiogram.dispatcher.filters.state import State, StatesGroup


# –ñ–∞–Ω—Ä—ã ================================================================================================================
async def genres(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω : ", reply_markup=client_kb.choose_kb)


@dp.callback_query_handler(Text(startswith="choose_"))
async def genre_show(callback: types.CallbackQuery):
    genre = callback.data.split("_")[1]

    if genre == "stop":
        await callback.message.delete()
        await callback.message.answer("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞", reply_markup=client_kb.home_kb)
    else:
        movie_lst = await base.get_movie_genre(genre)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ :",
                                         reply_markup=client_kb.movies_kb(movie_lst, genre))

    await callback.answer()


@dp.callback_query_handler(Text(startswith="genre_page"))
async def genre_choose(callback: types.CallbackQuery):
    action = callback.data.split("_")[2]
    page = callback.data.split("_")[3]
    genre = callback.data.split("_")[4]
    if action == "prev" and int(page) >= 2:
        movie_lst = await base.get_movie_genre(genre, int(page) - 1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ :",
                                         reply_markup=client_kb.movies_kb(movie_lst, genre, page=int(page) - 1))
    elif action == "next":
        movie_lst = await base.get_movie_genre(genre, int(page) + 1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ :",
                                         reply_markup=client_kb.movies_kb(movie_lst, genre, page=int(page) + 1))
    elif action == "back":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω : ",
                                         reply_markup=client_kb.choose_kb)
    await callback.answer()


@dp.callback_query_handler(Text(startswith="show_movie"))
async def movie_show(callback: types.CallbackQuery):
    movie_id = callback.data.split("_")[2]
    await callback.message.delete()

    movie = await base.get_movie_id(movie_id)
    movie = dict(movie[0][0])

    ganre = movie_ganres[movie['ganre']]

    await callback.message.answer_video(movie["video"],
                                        caption=f"""<b>{movie['name']}</b>
        \n{movie['description']}
        \n–ñ–∞–Ω—Ä: {ganre}\n–ì–æ–¥: {movie['date']}\n–°—Ç—Ä–∞–Ω–∞: {movie['country']}
        \n–†–µ–∂–∏—Å—ë—Ä|–ü—Ä–æ–¥—é—Å–µ—Ä: {movie['producer']}\n–ê–∫—Ç—ë—Ä—ã: {movie['actors']}""",
                                        reply_markup=client_kb.like_kb(movie_id, movie["likes"]))


class SearchM(StatesGroup):
    look = State()


# –ü–æ–∏—Å–∫ ================================================================================================================
async def search(message: types.Message):
    await message.answer(
        "–í–≤–∏–¥–µ–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –≥–æ–¥, –∂–∞–Ω—Ä, –∞–∫—Ç—ë—Ä–æ–≤ –∏–ª–∏ —Ä–µ–∂–∏—Å—ë—Ä–æ–≤. –ú—ã –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å–º",
            reply_markup=client_kb.cancel_kb)
    await SearchM.look.set()


@dp.message_handler(state=SearchM.look)
async def search_ans(message: types.Message, state: FSMContext):
    text = message.text.lower()
    text = movie_ganres_rus[text] if text in list(movie_ganres_rus.keys()) else message.text.lower()

    if text.lower() == "–û—Ç–º–µ–Ω–∞".lower():
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω ", reply_markup=client_kb.home_kb)
    else:
        movie_lst = await base.get_movie_search(text=text)
        print(movie_lst)
        if len(list(movie_lst)) == 0:
            await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ", reply_markup=client_kb.home_kb)
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É", reply_markup=client_kb.home_kb)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ :", reply_markup=client_kb.search_kb(movie_lst, text))
    await state.finish()


@dp.callback_query_handler(Text(startswith="search_page"))
async def search_choose(callback: types.CallbackQuery):
    action = callback.data.split("_")[2]
    page = callback.data.split("_")[3]
    query = callback.data.split("_")[4]

    if action == "prev" and int(page) >= 2:
        movie_lst = await base.get_movie_search(query, int(page) - 1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ :",
                                         reply_markup=client_kb.search_kb(movie_lst, query, page=int(page) - 1))
    elif action == "next":
        movie_lst = await base.get_movie_search(query, int(page) + 1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ :",
                                         reply_markup=client_kb.search_kb(movie_lst, query, page=int(page) + 1))
    await callback.answer()


# –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ ===========================================================================================================
async def popular(message: types.Message):
    pop = await base.get_movie_pop()
    await message.answer("–°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ : ",
                         reply_markup=client_kb.pop_movies_kb(pop))


@dp.callback_query_handler(Text(startswith="show_pop"))
async def popular_show(callback: types.CallbackQuery):
    movie_id = callback.data.split("_")[2]
    await callback.message.delete()

    movie = await base.get_movie_id(movie_id)
    movie = dict(movie[0][0])

    ganre = movie_ganres[movie['ganre']]

    await callback.message.answer_video(movie["video"],
                                        caption=f"""<b>{movie['name']}</b>
        \n{movie['description']}
        \n–ñ–∞–Ω—Ä: {ganre}\n–ì–æ–¥: {movie['date']}\n–°—Ç—Ä–∞–Ω–∞: {movie['country']}
        \n–†–µ–∂–∏—Å—ë—Ä|–ü—Ä–æ–¥—é—Å–µ—Ä: {movie['producer']}\n–ê–∫—Ç—ë—Ä—ã: {movie['actors']}""",
                                        reply_markup=client_kb.like_kb(movie_id, movie["likes"]))


@dp.callback_query_handler(Text(startswith="like_movie"))
async def movie_like(callback: types.CallbackQuery):
    movie_id = callback.data.split("_")[2]
    user_id = callback.from_user.id
    # print(movie_id, user_id)
    await base.user_like_movie(user_id=user_id, movie_id=movie_id)
    await callback.message.edit_reply_markup(reply_markup=client_kb.before_liked)
    await callback.answer("–ú—ã —Ä–∞–¥—ã —á—Ç–æ —Ñ–∏–ª—å–º –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è üòä")


# –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è ========================================================================================================
async def liked(message: types.Message):
    movie = await base.get_movie_liked(message.from_user.id)
    await message.answer("–§–∏–ª—å–º—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å: ", reply_markup=client_kb.liked_movies_kb(movie))


@dp.callback_query_handler(Text(startswith="show_liked"))
async def liked_show(callback: types.CallbackQuery):
    movie_id = callback.data.split("_")[2]
    await callback.message.delete()

    movie = await base.get_movie_id(movie_id)
    movie = dict(movie[0][0])

    ganre = movie_ganres[movie['ganre']]

    await callback.message.answer_video(movie["video"],
                                        caption=f"""<b>{movie['name']}</b>
        \n{movie['description']}
        \n–ñ–∞–Ω—Ä: {ganre}\n–ì–æ–¥: {movie['date']}\n–°—Ç—Ä–∞–Ω–∞: {movie['country']}
        \n–†–µ–∂–∏—Å—ë—Ä|–ü—Ä–æ–¥—é—Å–µ—Ä: {movie['producer']}\n–ê–∫—Ç—ë—Ä—ã: {movie['actors']}""", reply_markup=client_kb.before_liked)


async def about(message: types.Message):
    await message.answer("""–ú—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –°–§–ò–¢ –¢–£–ò–¢ –ë–ì–£–ò–†
–ö—É–¥–∞–π–±–µ—Ä–≥–µ–Ω–æ–≤.–ê –∏ –Æ–Ω—É—Å–æ–≤.–£ 
–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—à–∏–º –∫—É—Ä—Å–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ 1 –ø–æ–ª–æ–≤–∏–Ω–µ 3 –∫—É—Ä—Å–∞. 
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ –ø–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã. 
–¢–∞–∫–æ–π –º–µ—Ç–æ–¥ —É–¥–æ–±–µ–Ω –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω –¥–ª—è –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.""")


def register_client_handler(dp: Dispatcher):
    # –ñ–∞–Ω—Ä—ã
    dp.register_message_handler(genres, Text(startswith="–ñ–∞–Ω—Ä—ã", ignore_case=True))

    # –ü–æ–∏—Å–∫
    dp.register_message_handler(search, Text(startswith="–ü–æ–∏—Å–∫", ignore_case=True))

    # –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ
    dp.register_message_handler(popular, Text(startswith="–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", ignore_case=True))

    # –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è
    dp.register_message_handler(liked, Text(startswith="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è", ignore_case=True))

    # –ü—Ä–æ –Ω–∞—Å
    dp.register_message_handler(about, Text(startswith="–ü—Ä–æ –Ω–∞—Å", ignore_case=True))
